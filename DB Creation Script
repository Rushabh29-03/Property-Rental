-- database name: property_rental_DB

create table if not exists admin(
	admin_id serial primary key,
	username varchar(20) not null unique,
	password varchar(255) not null
);

create table if not exists users(
	user_id serial primary key,
	username varchar(20) unique not null,
	password varchar(255) not null,
	email varchar(100) unique not null,
	first_name varchar(50) not null,
	last_name varchar(50) not null,
	phone_no varchar(15),
	is_owner boolean default false,
	registration_date timestamp default current_timestamp
);

create table if not exists property(
	property_id serial primary key,
	user_id int not null, --FK
	description text,
	address text not null,
	is_verified boolean not null default false,
	area decimal(10, 2) not null,
	area_unit varchar(10) not null default 'sq_feet',
	monthly_rent decimal(10, 2) not null,
	no_of_bedrooms int,
	security_deposit_amount decimal(10, 2),
	min_stay int default 0,
	pets_policy text,
	smoking_allowed boolean default false,
	other_rules text,

	CONSTRAINT fk_property_user
		foreign key (user_id)
		references users(user_id)
		on delete cascade
);

-- alter table property
-- alter column area_unit set default 'sq_feet';

create table if not exists rented_property(
	rented_pr_id serial primary key,
	property_id int not null, --FK
	user_id int not null, --FK
	start_date date not null,
	end_date date not null,
	final_monthly_rent decimal(10, 2) not null,
	final_security_deposit decimal(10, 2) not null,
	duration int generated always as(
		(extract(year from end_date) - extract(year from start_date))*12 + 
		(extract(month from end_date) - extract(month from start_date)) - 
		case 
			when extract(day from end_date) < extract(day from start_date) 
			then 1 
			else 0
		end
	) stored,

	CONSTRAINT fk_rented_property
        foreign key (property_id)
        references Property(property_id)
        on delete restrict,

	CONSTRAINT fk_rented_user
		foreign key (user_id)
		references users(user_id)
		on delete restrict,

	-- prevents 2 user to rent same property on overlapping dates
	CONSTRAINT uq_property_rental_period
		unique (property_id, start_date, end_date),

	-- prevents same user to rent same property on same date
	CONSTRAINT uq_property_rental_details
		unique (property_id, user_id, start_date, end_date)
);

-- drop table rented_properties;

create table if not exists wishlisted_property(
	wishlisted_pr_id serial primary key,
	property_id int not null, --FK
	user_id int not null, --FK
	wishlist_date timestamp not null default current_timestamp,
	note text,
	status varchar(50) not null default 'New',

	CONSTRAINT fk_wishlist_property
		foreign key (property_id)
		references property(property_id)
		on delete cascade,
		
	CONSTRAINT fk_wishlist_user
		foreign key (user_id)
		references users(user_id)
		on delete cascade
);

create table if not exists facilities(
	fac_id serial primary key,
	fac_name varchar(20) unique not null
);

-- ALTER TABLE facilities
-- ADD CONSTRAINT uq_facilities_fac_name UNIQUE (fac_name);

create table if not exists property_facilities(
	property_id int not null, --FK
	fac_id int not null, --FK
	description text,

	primary key (property_id, fac_id),

	CONSTRAINT fk_pf_property
		foreign key (property_id)
		references property(property_id)
		on delete cascade,

	CONSTRAINT fk_pf_facility
		foreign key (fac_id)
		references facilities(fac_id)
		on delete restrict
);

create table if not exists photos(
	id serial primary key,
	pr_id int not null, --FK
	path text not null,
	is_main boolean not null,

	CONSTRAINT fk_photo_property
		foreign key (pr_id)
		references property(property_id)
		on delete cascade
);

create table if not exists tokens(
	id serial primary key,
	user_id int not null, --FK
	refresh_token varchar(255) unique not null,
	expiry_date timestamp not null,

	constraint fk_token_user
		foreign key (user_id)
		references users(user_id)
		on delete cascade,

	CONSTRAINT uq_token_user
		unique (user_id, refresh_token)
);
-- drop table tokens;